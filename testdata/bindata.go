// Code generated by go-bindata.
// sources:
// views/blocks/block.tpl
// views/header.tpl
// views/index.tpl
// DO NOT EDIT!

package testdata

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _viewsBlocksBlockTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xca\xc9\x4f\xce\x56\xaa\xad\xe5\xb2\xc9\x30\xb4\xf3\x48\xcd\xc9\xc9\xd7\x51\x00\x8b\x15\x2b\xda\xe8\x67\x18\xda\x71\x55\x57\xa7\xe6\xa5\xd4\xd6\x02\x02\x00\x00\xff\xff\xfd\xa1\x7a\xf6\x32\x00\x00\x00")

func viewsBlocksBlockTplBytes() ([]byte, error) {
	return bindataRead(
		_viewsBlocksBlockTpl,
		"views/blocks/block.tpl",
	)
}

func viewsBlocksBlockTpl() (*asset, error) {
	bytes, err := viewsBlocksBlockTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/blocks/block.tpl", size: 50, mode: os.FileMode(493), modTime: time.Unix(1556315630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsHeaderTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x4e\x49\x4d\xcb\xcc\x4b\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\xaa\xad\xe5\xb2\xc9\x30\xb4\xf3\x48\xcd\xc9\xc9\xd7\x51\x48\x2c\x4e\xcc\x4b\x54\xb4\xd1\xcf\x30\xb4\xe3\xaa\xae\x4e\xcd\x4b\xa9\xad\x05\x04\x00\x00\xff\xff\xc6\x8b\x3f\x07\x32\x00\x00\x00")

func viewsHeaderTplBytes() ([]byte, error) {
	return bindataRead(
		_viewsHeaderTpl,
		"views/header.tpl",
	)
}

func viewsHeaderTpl() (*asset, error) {
	bytes, err := viewsHeaderTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/header.tpl", size: 50, mode: os.FileMode(493), modTime: time.Unix(1556315630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _viewsIndexTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8f\xc1\x0a\xc2\x30\x10\x44\xcf\xcd\x57\xac\xfd\x80\x06\x7a\x94\x25\x17\xf5\xac\x60\x11\x3c\xa6\xed\x42\x8a\x89\x09\x4d\x40\x24\xe4\xdf\x25\x89\x3d\x88\xa7\x49\x66\xdf\xb0\xb3\xb8\x3b\x9e\x0f\xc3\xfd\x72\x02\x15\x8c\x16\x0c\xab\x00\xa0\x22\x39\xe7\x07\x00\x86\x25\x68\x12\xd2\xcb\xa7\x84\x17\xe9\xc9\x1a\x82\x40\xc6\x69\x19\x08\x79\x9d\xe6\x08\xdf\x32\x38\xda\xf9\x2d\x18\x6b\x62\xdc\x38\x68\x47\x6d\xa7\x47\x9b\xd2\xaf\x9b\x23\xb4\xfe\xd9\x05\xf6\xbc\x48\x17\x9c\xce\x00\x6b\x50\xf5\x22\x46\xe8\x86\xbc\x12\x52\x42\xae\x7a\xc1\x1a\x74\x02\x06\xb5\x78\x58\x3c\x5c\xad\xa1\x9b\x5c\xf7\x90\xb9\xef\xa7\x90\xae\x56\xac\xcd\x90\xd7\x3b\x3f\x01\x00\x00\xff\xff\xc4\x17\x0e\x7e\xff\x00\x00\x00")

func viewsIndexTplBytes() ([]byte, error) {
	return bindataRead(
		_viewsIndexTpl,
		"views/index.tpl",
	)
}

func viewsIndexTpl() (*asset, error) {
	bytes, err := viewsIndexTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "views/index.tpl", size: 255, mode: os.FileMode(493), modTime: time.Unix(1556315630, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"views/blocks/block.tpl": viewsBlocksBlockTpl,
	"views/header.tpl": viewsHeaderTpl,
	"views/index.tpl": viewsIndexTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"views": &bintree{nil, map[string]*bintree{
		"blocks": &bintree{nil, map[string]*bintree{
			"block.tpl": &bintree{viewsBlocksBlockTpl, map[string]*bintree{}},
		}},
		"header.tpl": &bintree{viewsHeaderTpl, map[string]*bintree{}},
		"index.tpl": &bintree{viewsIndexTpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
